#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
//var ws = require('ws');
var debug = require('debug')('BaseballSim:server');
var http = require('http');

var SecurityController = require('./../Controller/SecurityController');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');//8080
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Create WS Server
 */
//var wss = require('socket.io').listen(server);
//
//wss.use(function(socket, next){
//  //console.log("Query: ", socket.handshake.query.token);
//  // return the result of next() to accept the connection.
//  if (socket.handshake.query.token) {
//    SecurityController.validateToken(socket.handshake.query.token).then(function(tokenData){
//      socket.handshake.query.userdata = tokenData;
//      return next();
//    }).catch(function(err){
//      console.log(err);
//      // call next() with an Error if you need to reject the connection.
//      next(new Error('Authentication error'));
//    });
//  }else{
//    // call next() with an Error if you need to reject the connection.
//    console.log("ERR");
//    next(new Error('Authentication error'));
//  }
//});

//wss.on('connection', function(socket) {
//  socket.emit('chat message', "welcome");
//  //console.log("connection: ",socket.handshake.query.userdata.username);
//  socket.on('chat message', function(msg){
//    wss.emit('chat message', socket.handshake.query.userdata.username + ": " + msg);
//  });
//});

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
